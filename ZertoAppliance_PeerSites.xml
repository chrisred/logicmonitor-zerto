<?xml version="1.0" encoding="UTF-8" ?>
<feed  version="1.0" hasPendingRequests="false" >
  <company></company>
  <status>200</status>
  <errmsg>OK</errmsg>
  <interval>0</interval>
  <isCollectorPublisherEnabled>false</isCollectorPublisherEnabled>
    <entry type="predatasource">
        <version>1720222056</version>
        <name>ZertoAppliance_PeerSites</name>
        <displayedas>Zerto Appliance Peer Sites</displayedas>
        <description>Peer site pairing status and metrics.</description>
        <collector>batchscript</collector>
        <hasMultiInstances>true</hasMultiInstances>
        <useWildValueAsUniqueIdentifier>true</useWildValueAsUniqueIdentifier>
        <schedule>180</schedule>
        <appliesTo>hasCategory(&#34;ZertoAppliance&#34;)</appliesTo>
        <wildcardauto>true</wildcardauto>
        <wildcardpersist>false</wildcardpersist>
        <wildcardlinuxscript>ad_script</wildcardlinuxscript>
        <wildcardlinuxcmdline>type=&#34;embeded&#34; </wildcardlinuxcmdline>
        <wildcardwinscript>ad_script</wildcardwinscript>
        <wildcardwincmdline>type=&#34;embeded&#34; </wildcardwincmdline>
        <wildcardgroovyscript>// Copyright (c) 2024 Chris Redit. All rights reserved. https://github.com/chrisred/logicmonitor-zerto

import com.santaba.agent.util.script.ScriptCache
import groovy.json.JsonSlurper
import org.apache.http.client.utils.URIBuilder
import org.apache.http.message.BasicNameValuePair

// core http classes
import org.apache.http.auth.AuthScope
import org.apache.http.auth.Credentials
import org.apache.http.auth.NTCredentials
import org.apache.http.client.config.*
import org.apache.http.client.entity.*
import org.apache.http.client.methods.*
import org.apache.http.client.ServiceUnavailableRetryStrategy
import org.apache.http.conn.ssl.NoopHostnameVerifier
import org.apache.http.conn.ssl.TrustSelfSignedStrategy
import org.apache.http.entity.*
import org.apache.http.Header
import org.apache.http.HttpResponse
import org.apache.http.impl.client.BasicCredentialsProvider
import org.apache.http.impl.client.CloseableHttpClient
import org.apache.http.impl.client.HttpClients
import org.apache.http.impl.client.HttpClientBuilder
import org.apache.http.impl.client.StandardHttpRequestRetryHandler
import org.apache.http.ssl.SSLContextBuilder
import org.apache.http.util.EntityUtils

// LM properties
def propDeviceId = hostProps.get(&#39;system.deviceId&#39;)
def propSystemHost = hostProps.get(&#39;system.hostname&#39;)
def propHost = hostProps.get(&#39;zertoappliance.host&#39;) ?: propSystemHost
def propPort = hostProps.get(&#39;zertoappliance.port&#39;)?.isInteger() ?
    hostProps.get(&#39;zertoappliance.port&#39;).toInteger() : 443
def propUser = hostProps.get(&#39;zertoappliance.user&#39;)
def propPass = hostProps.get(&#39;zertoappliance.pass&#39;)
def propClientId = hostProps.get(&#39;zertoappliance.api.id&#39;)
def propClientSecret = hostProps.get(&#39;zertoappliance.api.key&#39;)
def propApplianceType = hostProps.get(&#39;zertoappliance.type&#39;)

try
{
    def token = getCachedToken(propDeviceId)
    def applianceType = getApplianceType(propPort, propApplianceType)

    if (token == &#39;&#39;)
    {
        if (applianceType == &#39;linux&#39;)
        {
            token = getLinuxToken(propHost, propPort, propClientId, propClientSecret)
        }
        else
        {
            token = getWindowsToken(propHost, propPort, propUser, propPass)
        }

        if (token == &#39;&#39;)
        {
            println &#39;Error: Invalid session token.&#39;
            return 2
        }
    }

    // GET request
    def mainUriBuilder = new URIBuilder()
        .setScheme(&#39;https&#39;)
        .setHost(propHost)
        .setPort(propPort)
        .setPath(&#39;/v1/peersites&#39;)

    def httpGet = new HttpGet(mainUriBuilder.build())

    if (applianceType == &#39;linux&#39;)
    {
        httpGet.setHeader(&#39;Authorization&#39;, &#34;Bearer ${token}&#34;)
    }
    else
    {
        httpGet.setHeader(&#39;x-zerto-session&#39;, token)
    }

    def mainResponse = runRequest(httpGet)

    if (mainResponse.code != 200)
    {
        println &#34;Error: Bad response code (${mainResponse.code}).&#34;
        return 3
    }

    def jsonSlurper = new JsonSlurper()
    def jsonResponse = jsonSlurper.parseText(mainResponse.body)

    jsonResponse.each { site -&#62;
        def wildValue = site.SiteIdentifier
        def wildAlias = site.PeerSiteName

        def instanceProperties = [
            &#39;zertoappliance.hostname&#39; : site.HostName,
            &#39;zertoappliance.location&#39; : site.Location,
            &#39;zertoappliance.type&#39; : site.SiteType
        ]

        // Encode the instance property strings to escape any HTTP/URL special characters, the wild value/alias strings
        // appear to be encoded by LogicMontor automatically.
        instanceProperyStrings = instanceProperties.collect { property, value -&#62;
            URLEncoder.encode(property, &#39;UTF-8&#39;) + &#39;=&#39; + URLEncoder.encode(value.toString(), &#39;UTF-8&#39;)
        }

        println &#34;${wildValue}##${wildAlias}######${instanceProperyStrings.join(&#39;&#38;&#39;)}&#34;
    }

    return 0
}
catch (Exception e)
{
    println e
    return 1
}

String getCachedToken(String deviceId)
{
    def cache = ScriptCache.getCache()
    def cacheValue = cache.get(&#34;ZertoApplianceToken${deviceId}&#34;)

    return cacheValue ?: &#39;&#39;
}

String getApplianceType(Integer port, String applianceType)
{
    if (applianceType == &#39;linux&#39;) { return &#39;linux&#39; }
    else if (applianceType == &#39;windows&#39;) { return &#39;windows&#39; }
    else if (port == 443) { return &#39;linux&#39; }
    else { return &#39;windows&#39; }
}

String getLinuxToken(String host, Integer port, String clientId, String clientSecret)
{
    def accessToken = &#39;&#39;

    def postUriBuilder = new URIBuilder()
        .setScheme(&#39;https&#39;)
        .setPort(port)
        .setHost(host)
        .setPath(&#39;/auth/realms/zerto/protocol/openid-connect/token&#39;)

    def postData = []
    postData.add(new BasicNameValuePair(&#39;grant_type&#39;, &#39;client_credentials&#39;))
    postData.add(new BasicNameValuePair(&#39;client_id&#39;, clientId))
    postData.add(new BasicNameValuePair(&#39;client_secret&#39;, clientSecret))
    def postEntity = new UrlEncodedFormEntity(postData)

    def httpPost = new HttpPost(postUriBuilder.build())
    httpPost.setHeader(&#39;Accept&#39;, &#39;application/json&#39;)
    httpPost.setHeader(&#39;Content-Type&#39;, &#39;application/x-www-form-urlencoded&#39;)

    def postResponse = runRequest(httpPost, null, postEntity)

    if (postResponse.code == 200)
    {
        def jsonSlurper = new JsonSlurper()
        def jsonResponse = jsonSlurper.parseText(postResponse.body)
        accessToken = jsonResponse.access_token
    }

    return accessToken
}

String getWindowsToken(String host, Integer port, String user, String pass)
{
    def sessionKey = &#39;&#39;
    def base64Auth = &#34;${user}:${pass}&#34;.bytes.encodeBase64().toString()

    def postUriBuilder = new URIBuilder()
        .setScheme(&#39;https&#39;)
        .setHost(host)
        .setPort(port)
        .setPath(&#39;/v1/session/add&#39;)

    def httpPost = new HttpPost(postUriBuilder.build())
    httpPost.setHeader(&#39;Authorization&#39; , &#34;Basic ${base64Auth}&#34;)
    httpPost.setHeader(&#39;Content-Type&#39;, &#39;application/json&#39;)

    def postData = &#39;{&#34;authenticationMethod&#34;: 1}&#39;
    def postEntity = new StringEntity(postData, ContentType.APPLICATION_JSON)

    def postResponse = runRequest(httpPost, null, postEntity)

    if (postResponse.code == 200)
    {
        sessionKey = postResponse.headers.find { it.getName() == &#39;x-zerto-session&#39; }.getValue()
    }

    return sessionKey
}

Map runRequest(HttpRequestBase request, Credentials credentials=null, AbstractHttpEntity entity=null)
{
    if (request instanceof HttpGet != true)
    {
        request.setEntity(entity)
    }

    // http://docs.groovy-lang.org/docs/groovy-2.4.21/html/documentation/#_map_to_type_coercion
    // https://stackoverflow.com/questions/48541329/timeout-between-request-retries-apache-httpclient
    def waitPeriod = 0L
    def serviceRetry = [
        retryRequest: { response, executionCount, context -&#62;
            // increase the wait for each try, here we would wait 3, 6 and 9 seconds
            waitPeriod += 3000L
            def statusCode = response.getStatusLine().getStatusCode()
            return executionCount &#60;= 3 &#38;&#38; (statusCode == 429 || statusCode == 500 || statusCode == 503)
        },
        getRetryInterval: {
            return waitPeriod
        }
    ] as ServiceUnavailableRetryStrategy

    // create an http client which retries for connection &#34;I/O&#34; errors and for certain http status codes
    HttpClientBuilder httpClientBuilder = HttpClients.custom()
        .setDefaultRequestConfig(RequestConfig.custom().setCookieSpec(CookieSpecs.STANDARD).build())
        .setRetryHandler(new StandardHttpRequestRetryHandler(3, false))
        .setServiceUnavailableRetryStrategy(serviceRetry)

    // allow self-signed certificates
    httpClientBuilder.setSSLContext(
        new SSLContextBuilder().loadTrustMaterial(null, TrustSelfSignedStrategy.INSTANCE).build()
    ).setSSLHostnameVerifier(NoopHostnameVerifier.INSTANCE)

    if (credentials)
    {
        // attempt authentication with credentials supported by the BasicCredentialsProvider
        BasicCredentialsProvider credentialProvider = new BasicCredentialsProvider()
        credentialProvider.setCredentials(AuthScope.ANY, credentials)
        httpClientBuilder.setDefaultCredentialsProvider(credentialProvider)
    }

    CloseableHttpClient httpClient = httpClientBuilder.build()
    HttpResponse response = httpClient.execute(request)
    String responseBody = null

    if (response.getEntity())
    {
        // only attempt to convert the body to string if there is content
        responseBody = EntityUtils.toString(response.getEntity())
    }

    Integer code = response.getStatusLine().getStatusCode()
    List&#60;Header&#62; headers = response.getAllHeaders()

    def responseMap = [
        code: code,
        headers: headers,
        body: responseBody,
    ]

    httpClient.close()
    return responseMap
}
</wildcardgroovyscript>
        <wildcardschedule>1440</wildcardschedule>
        <wildcarddisable>false</wildcarddisable>
        <wildcarddeleteinactive>false</wildcarddeleteinactive>
        <agdmethod>none</agdmethod>
        <agdparams></agdparams>
        <group></group>
        <tags></tags>
        <technology>Device Properties:

zertoappliance.host -- Optional, defaults to the device IP when not set.
zertoappliance.port -- Optional, defaults to 443 (Linux), set 9669 for Windows appliances.
zertoappliance.user -- The user name (in the UPN or NetBIOS form as necessary), used with the Windows appliance.
zertoappliance.pass -- The user password, used with the Windows appliance.
zertoappliance.api.id -- The client ID, used with the Linux appliance.
zertoappliance.api.key -- The client secret, used with the Linux appliance.
zertoappliance.type -- Optional, forces the appliance type if required, set either &#34;windows&#34; or &#34;linux&#34;.
system.categories -- Add &#34;ZertoAppliance&#34;.

Notes:

Requires access to the API endpoint on the ZVM or ZCM appliance. See the &#34;ZertoAppliance_Token&#34; DataSource for details.</technology>
        <adlist><![CDATA[{"agdmethod":"none","method":"ad_script","agdparams":"","id":0,"filters":[],"params":{"type":"embeded","groovyscript":"// Copyright (c) 2024 Chris Redit. All rights reserved. https://github.com/chrisred/logicmonitor-zerto\n\nimport com.santaba.agent.util.script.ScriptCache\nimport groovy.json.JsonSlurper\nimport org.apache.http.client.utils.URIBuilder\nimport org.apache.http.message.BasicNameValuePair\n\n// core http classes\nimport org.apache.http.auth.AuthScope\nimport org.apache.http.auth.Credentials\nimport org.apache.http.auth.NTCredentials\nimport org.apache.http.client.config.*\nimport org.apache.http.client.entity.*\nimport org.apache.http.client.methods.*\nimport org.apache.http.client.ServiceUnavailableRetryStrategy\nimport org.apache.http.conn.ssl.NoopHostnameVerifier\nimport org.apache.http.conn.ssl.TrustSelfSignedStrategy\nimport org.apache.http.entity.*\nimport org.apache.http.Header\nimport org.apache.http.HttpResponse\nimport org.apache.http.impl.client.BasicCredentialsProvider\nimport org.apache.http.impl.client.CloseableHttpClient\nimport org.apache.http.impl.client.HttpClients\nimport org.apache.http.impl.client.HttpClientBuilder\nimport org.apache.http.impl.client.StandardHttpRequestRetryHandler\nimport org.apache.http.ssl.SSLContextBuilder\nimport org.apache.http.util.EntityUtils\n\n// LM properties\ndef propDeviceId = hostProps.get('system.deviceId')\ndef propSystemHost = hostProps.get('system.hostname')\ndef propHost = hostProps.get('zertoappliance.host') ?: propSystemHost\ndef propPort = hostProps.get('zertoappliance.port')?.isInteger() ?\n    hostProps.get('zertoappliance.port').toInteger() : 443\ndef propUser = hostProps.get('zertoappliance.user')\ndef propPass = hostProps.get('zertoappliance.pass')\ndef propClientId = hostProps.get('zertoappliance.api.id')\ndef propClientSecret = hostProps.get('zertoappliance.api.key')\ndef propApplianceType = hostProps.get('zertoappliance.type')\n\ntry\n{\n    def token = getCachedToken(propDeviceId)\n    def applianceType = getApplianceType(propPort, propApplianceType)\n\n    if (token == '')\n    {\n        if (applianceType == 'linux')\n        {\n            token = getLinuxToken(propHost, propPort, propClientId, propClientSecret)\n        }\n        else\n        {\n            token = getWindowsToken(propHost, propPort, propUser, propPass)\n        }\n\n        if (token == '')\n        {\n            println 'Error: Invalid session token.'\n            return 2\n        }\n    }\n\n    // GET request\n    def mainUriBuilder = new URIBuilder()\n        .setScheme('https')\n        .setHost(propHost)\n        .setPort(propPort)\n        .setPath('/v1/peersites')\n\n    def httpGet = new HttpGet(mainUriBuilder.build())\n\n    if (applianceType == 'linux')\n    {\n        httpGet.setHeader('Authorization', \"Bearer ${token}\")\n    }\n    else\n    {\n        httpGet.setHeader('x-zerto-session', token)\n    }\n\n    def mainResponse = runRequest(httpGet)\n\n    if (mainResponse.code != 200)\n    {\n        println \"Error: Bad response code (${mainResponse.code}).\"\n        return 3\n    }\n\n    def jsonSlurper = new JsonSlurper()\n    def jsonResponse = jsonSlurper.parseText(mainResponse.body)\n\n    jsonResponse.each { site ->\n        def wildValue = site.SiteIdentifier\n        def wildAlias = site.PeerSiteName\n\n        def instanceProperties = [\n            'zertoappliance.hostname' : site.HostName,\n            'zertoappliance.location' : site.Location,\n            'zertoappliance.type' : site.SiteType\n        ]\n\n        // Encode the instance property strings to escape any HTTP/URL special characters, the wild value/alias strings\n        // appear to be encoded by LogicMontor automatically.\n        instanceProperyStrings = instanceProperties.collect { property, value ->\n            URLEncoder.encode(property, 'UTF-8') + '=' + URLEncoder.encode(value.toString(), 'UTF-8')\n        }\n\n        println \"${wildValue}##${wildAlias}######${instanceProperyStrings.join('&')}\"\n    }\n\n    return 0\n}\ncatch (Exception e)\n{\n    println e\n    return 1\n}\n\nString getCachedToken(String deviceId)\n{\n    def cache = ScriptCache.getCache()\n    def cacheValue = cache.get(\"ZertoApplianceToken${deviceId}\")\n\n    return cacheValue ?: ''\n}\n\nString getApplianceType(Integer port, String applianceType)\n{\n    if (applianceType == 'linux') { return 'linux' }\n    else if (applianceType == 'windows') { return 'windows' }\n    else if (port == 443) { return 'linux' }\n    else { return 'windows' }\n}\n\nString getLinuxToken(String host, Integer port, String clientId, String clientSecret)\n{\n    def accessToken = ''\n\n    def postUriBuilder = new URIBuilder()\n        .setScheme('https')\n        .setPort(port)\n        .setHost(host)\n        .setPath('/auth/realms/zerto/protocol/openid-connect/token')\n\n    def postData = []\n    postData.add(new BasicNameValuePair('grant_type', 'client_credentials'))\n    postData.add(new BasicNameValuePair('client_id', clientId))\n    postData.add(new BasicNameValuePair('client_secret', clientSecret))\n    def postEntity = new UrlEncodedFormEntity(postData)\n\n    def httpPost = new HttpPost(postUriBuilder.build())\n    httpPost.setHeader('Accept', 'application/json')\n    httpPost.setHeader('Content-Type', 'application/x-www-form-urlencoded')\n\n    def postResponse = runRequest(httpPost, null, postEntity)\n\n    if (postResponse.code == 200)\n    {\n        def jsonSlurper = new JsonSlurper()\n        def jsonResponse = jsonSlurper.parseText(postResponse.body)\n        accessToken = jsonResponse.access_token\n    }\n\n    return accessToken\n}\n\nString getWindowsToken(String host, Integer port, String user, String pass)\n{\n    def sessionKey = ''\n    def base64Auth = \"${user}:${pass}\".bytes.encodeBase64().toString()\n\n    def postUriBuilder = new URIBuilder()\n        .setScheme('https')\n        .setHost(host)\n        .setPort(port)\n        .setPath('/v1/session/add')\n\n    def httpPost = new HttpPost(postUriBuilder.build())\n    httpPost.setHeader('Authorization' , \"Basic ${base64Auth}\")\n    httpPost.setHeader('Content-Type', 'application/json')\n\n    def postData = '{\"authenticationMethod\": 1}'\n    def postEntity = new StringEntity(postData, ContentType.APPLICATION_JSON)\n\n    def postResponse = runRequest(httpPost, null, postEntity)\n\n    if (postResponse.code == 200)\n    {\n        sessionKey = postResponse.headers.find { it.getName() == 'x-zerto-session' }.getValue()\n    }\n\n    return sessionKey\n}\n\nMap runRequest(HttpRequestBase request, Credentials credentials=null, AbstractHttpEntity entity=null)\n{\n    if (request instanceof HttpGet != true)\n    {\n        request.setEntity(entity)\n    }\n\n    // http://docs.groovy-lang.org/docs/groovy-2.4.21/html/documentation/#_map_to_type_coercion\n    // https://stackoverflow.com/questions/48541329/timeout-between-request-retries-apache-httpclient\n    def waitPeriod = 0L\n    def serviceRetry = [\n        retryRequest: { response, executionCount, context ->\n            // increase the wait for each try, here we would wait 3, 6 and 9 seconds\n            waitPeriod += 3000L\n            def statusCode = response.getStatusLine().getStatusCode()\n            return executionCount <= 3 && (statusCode == 429 || statusCode == 500 || statusCode == 503)\n        },\n        getRetryInterval: {\n            return waitPeriod\n        }\n    ] as ServiceUnavailableRetryStrategy\n\n    // create an http client which retries for connection \"I/O\" errors and for certain http status codes\n    HttpClientBuilder httpClientBuilder = HttpClients.custom()\n        .setDefaultRequestConfig(RequestConfig.custom().setCookieSpec(CookieSpecs.STANDARD).build())\n        .setRetryHandler(new StandardHttpRequestRetryHandler(3, false))\n        .setServiceUnavailableRetryStrategy(serviceRetry)\n\n    // allow self-signed certificates\n    httpClientBuilder.setSSLContext(\n        new SSLContextBuilder().loadTrustMaterial(null, TrustSelfSignedStrategy.INSTANCE).build()\n    ).setSSLHostnameVerifier(NoopHostnameVerifier.INSTANCE)\n\n    if (credentials)\n    {\n        // attempt authentication with credentials supported by the BasicCredentialsProvider\n        BasicCredentialsProvider credentialProvider = new BasicCredentialsProvider()\n        credentialProvider.setCredentials(AuthScope.ANY, credentials)\n        httpClientBuilder.setDefaultCredentialsProvider(credentialProvider)\n    }\n\n    CloseableHttpClient httpClient = httpClientBuilder.build()\n    HttpResponse response = httpClient.execute(request)\n    String responseBody = null\n\n    if (response.getEntity())\n    {\n        // only attempt to convert the body to string if there is content\n        responseBody = EntityUtils.toString(response.getEntity())\n    }\n\n    Integer code = response.getStatusLine().getStatusCode()\n    List<Header> headers = response.getAllHeaders()\n\n    def responseMap = [\n        code: code,\n        headers: headers,\n        body: responseBody,\n    ]\n\n    httpClient.close()\n    return responseMap\n}\n"}}]]></adlist>
        <schemaVersion>2</schemaVersion>
        <dataSourceType>1</dataSourceType>
        <attributes>
        <attribute>
            <name>scripttype</name>
            <value>embed</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>scriptgroovy</name>
            <value>// Copyright (c) 2024 Chris Redit. All rights reserved. https://github.com/chrisred/logicmonitor-zerto

import com.santaba.agent.util.script.ScriptCache
import groovy.json.JsonSlurper
import org.apache.http.client.utils.URIBuilder
import org.apache.http.message.BasicNameValuePair

// core http classes
import org.apache.http.auth.AuthScope
import org.apache.http.auth.Credentials
import org.apache.http.auth.NTCredentials
import org.apache.http.client.config.*
import org.apache.http.client.entity.*
import org.apache.http.client.methods.*
import org.apache.http.client.ServiceUnavailableRetryStrategy
import org.apache.http.conn.ssl.NoopHostnameVerifier
import org.apache.http.conn.ssl.TrustSelfSignedStrategy
import org.apache.http.entity.*
import org.apache.http.Header
import org.apache.http.HttpResponse
import org.apache.http.impl.client.BasicCredentialsProvider
import org.apache.http.impl.client.CloseableHttpClient
import org.apache.http.impl.client.HttpClients
import org.apache.http.impl.client.HttpClientBuilder
import org.apache.http.impl.client.StandardHttpRequestRetryHandler
import org.apache.http.ssl.SSLContextBuilder
import org.apache.http.util.EntityUtils

// LM properties
def propDeviceId = hostProps.get(&#39;system.deviceId&#39;)
def propSystemHost = hostProps.get(&#39;system.hostname&#39;)
def propHost = hostProps.get(&#39;zertoappliance.host&#39;) ?: propSystemHost
def propPort = hostProps.get(&#39;zertoappliance.port&#39;)?.isInteger() ?
    hostProps.get(&#39;zertoappliance.port&#39;).toInteger() : 443
def propUser = hostProps.get(&#39;zertoappliance.user&#39;)
def propPass = hostProps.get(&#39;zertoappliance.pass&#39;)
def propClientId = hostProps.get(&#39;zertoappliance.api.id&#39;)
def propClientSecret = hostProps.get(&#39;zertoappliance.api.key&#39;)
def propApplianceType = hostProps.get(&#39;zertoappliance.type&#39;)

try
{
    def token = getCachedToken(propDeviceId)
    def applianceType = getApplianceType(propPort, propApplianceType)

    if (token == &#39;&#39;)
    {
        if (applianceType == &#39;linux&#39;)
        {
            token = getLinuxToken(propHost, propPort, propClientId, propClientSecret)
        }
        else
        {
            token = getWindowsToken(propHost, propPort, propUser, propPass)
        }

        if (token == &#39;&#39;)
        {
            println &#39;Error: Invalid session token.&#39;
            return 2
        }
    }

    // GET request
    def mainUriBuilder = new URIBuilder()
        .setScheme(&#39;https&#39;)
        .setHost(propHost)
        .setPort(propPort)
        .setPath(&#39;/v1/peersites&#39;)

    def httpGet = new HttpGet(mainUriBuilder.build())

    if (applianceType == &#39;linux&#39;)
    {
        httpGet.setHeader(&#39;Authorization&#39;, &#34;Bearer ${token}&#34;)
    }
    else
    {
        httpGet.setHeader(&#39;x-zerto-session&#39;, token)
    }

    def mainResponse = runRequest(httpGet)

    if (mainResponse.code != 200)
    {
        println &#34;Error: Bad response code (${mainResponse.code}).&#34;
        return 3
    }

    def jsonSlurper = new JsonSlurper()
    def jsonResponse = jsonSlurper.parseText(mainResponse.body)

    jsonResponse.each { site -&#62;
        def wildValue = site.SiteIdentifier

        output(&#39;PairingStatus&#39;, site.PairingStatus, wildValue)
        output(&#39;ProvisionedStorage&#39;, site.ProvisionedStorage, wildValue)
        output(&#39;UsedStorage&#39;, site.UsedStorage, wildValue)
        output(&#39;IncomingThroughputInMb&#39;, site.IncomingThroughputInMb, wildValue)
        output(&#39;OutgoingBandWidth&#39;, site.OutgoingBandWidth, wildValue)
    }

    return 0
}
catch (Exception e)
{
    println e
    return 1
}

String getCachedToken(String deviceId)
{
    def cache = ScriptCache.getCache()
    def cacheValue = cache.get(&#34;ZertoApplianceToken${deviceId}&#34;)

    return cacheValue ?: &#39;&#39;
}

String getApplianceType(Integer port, String applianceType)
{
    if (applianceType == &#39;linux&#39;) { return &#39;linux&#39; }
    else if (applianceType == &#39;windows&#39;) { return &#39;windows&#39; }
    else if (port == 443) { return &#39;linux&#39; }
    else { return &#39;windows&#39; }
}

String getLinuxToken(String host, Integer port, String clientId, String clientSecret)
{
    def accessToken = &#39;&#39;

    def postUriBuilder = new URIBuilder()
        .setScheme(&#39;https&#39;)
        .setPort(port)
        .setHost(host)
        .setPath(&#39;/auth/realms/zerto/protocol/openid-connect/token&#39;)

    def postData = []
    postData.add(new BasicNameValuePair(&#39;grant_type&#39;, &#39;client_credentials&#39;))
    postData.add(new BasicNameValuePair(&#39;client_id&#39;, clientId))
    postData.add(new BasicNameValuePair(&#39;client_secret&#39;, clientSecret))
    def postEntity = new UrlEncodedFormEntity(postData)

    def httpPost = new HttpPost(postUriBuilder.build())
    httpPost.setHeader(&#39;Accept&#39;, &#39;application/json&#39;)
    httpPost.setHeader(&#39;Content-Type&#39;, &#39;application/x-www-form-urlencoded&#39;)

    def postResponse = runRequest(httpPost, null, postEntity)

    if (postResponse.code == 200)
    {
        def jsonSlurper = new JsonSlurper()
        def jsonResponse = jsonSlurper.parseText(postResponse.body)
        accessToken = jsonResponse.access_token
    }

    return accessToken
}

String getWindowsToken(String host, Integer port, String user, String pass)
{
    def sessionKey = &#39;&#39;
    def base64Auth = &#34;${user}:${pass}&#34;.bytes.encodeBase64().toString()

    def postUriBuilder = new URIBuilder()
        .setScheme(&#39;https&#39;)
        .setHost(host)
        .setPort(port)
        .setPath(&#39;/v1/session/add&#39;)

    def httpPost = new HttpPost(postUriBuilder.build())
    httpPost.setHeader(&#39;Authorization&#39; , &#34;Basic ${base64Auth}&#34;)
    httpPost.setHeader(&#39;Content-Type&#39;, &#39;application/json&#39;)

    def postData = &#39;{&#34;authenticationMethod&#34;: 1}&#39;
    def postEntity = new StringEntity(postData, ContentType.APPLICATION_JSON)

    def postResponse = runRequest(httpPost, null, postEntity)

    if (postResponse.code == 200)
    {
        sessionKey = postResponse.headers.find { it.getName() == &#39;x-zerto-session&#39; }.getValue()
    }

    return sessionKey
}

Map runRequest(HttpRequestBase request, Credentials credentials=null, AbstractHttpEntity entity=null)
{
    if (request instanceof HttpGet != true)
    {
        request.setEntity(entity)
    }

    // http://docs.groovy-lang.org/docs/groovy-2.4.21/html/documentation/#_map_to_type_coercion
    // https://stackoverflow.com/questions/48541329/timeout-between-request-retries-apache-httpclient
    def waitPeriod = 0L
    def serviceRetry = [
        retryRequest: { response, executionCount, context -&#62;
            // increase the wait for each try, here we would wait 3, 6 and 9 seconds
            waitPeriod += 3000L
            def statusCode = response.getStatusLine().getStatusCode()
            return executionCount &#60;= 3 &#38;&#38; (statusCode == 429 || statusCode == 500 || statusCode == 503)
        },
        getRetryInterval: {
            return waitPeriod
        }
    ] as ServiceUnavailableRetryStrategy

    // create an http client which retries for connection &#34;I/O&#34; errors and for certain http status codes
    HttpClientBuilder httpClientBuilder = HttpClients.custom()
        .setDefaultRequestConfig(RequestConfig.custom().setCookieSpec(CookieSpecs.STANDARD).build())
        .setRetryHandler(new StandardHttpRequestRetryHandler(3, false))
        .setServiceUnavailableRetryStrategy(serviceRetry)

    // allow self-signed certificates
    httpClientBuilder.setSSLContext(
        new SSLContextBuilder().loadTrustMaterial(null, TrustSelfSignedStrategy.INSTANCE).build()
    ).setSSLHostnameVerifier(NoopHostnameVerifier.INSTANCE)

    if (credentials)
    {
        // attempt authentication with credentials supported by the BasicCredentialsProvider
        BasicCredentialsProvider credentialProvider = new BasicCredentialsProvider()
        credentialProvider.setCredentials(AuthScope.ANY, credentials)
        httpClientBuilder.setDefaultCredentialsProvider(credentialProvider)
    }

    CloseableHttpClient httpClient = httpClientBuilder.build()
    HttpResponse response = httpClient.execute(request)
    String responseBody = null

    if (response.getEntity())
    {
        // only attempt to convert the body to string if there is content
        responseBody = EntityUtils.toString(response.getEntity())
    }

    Integer code = response.getStatusLine().getStatusCode()
    List&#60;Header&#62; headers = response.getAllHeaders()

    def responseMap = [
        code: code,
        headers: headers,
        body: responseBody,
    ]

    httpClient.close()
    return responseMap
}

void output(key, value, instanceId=null)
{
    if (value instanceof BigDecimal)
    {
        // make sure BigDecimal does not render to string with Scientific Notation
        value = value.toPlainString()
    }

    if (value instanceof Boolean)
    {
        value = value ? 1:0
    }

    if (instanceId)
    {
        println &#34;${instanceId}.${key}=${value}&#34;
    }
    else
    {
        println &#34;${key}=${value}&#34;
    }
}</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowsscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowscmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxcmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        </attributes>
        <datapoints>
        <datapoint>
            <name>ExitCode</name>
            <originId>wvkwqBZ5REuDciASmBKR8Q</originId>
            <dataType>4</dataType>
            <type>2</type>
            <postprocessormethod>none</postprocessormethod>
            <postprocessorparam></postprocessorparam>
            <usevalue>exitCode</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description></description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <maxdigits>4</maxdigits>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>PairingStatus</name>
            <originId>C1YzTcH6RUSehAriTHJuRg</originId>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>##WILDVALUE##.PairingStatus</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description>The connection status of the local site.

Status codes:
0=Paired
1=Pairing
2=Unpaired</description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <maxdigits>4</maxdigits>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>ProvisionedStorageMB</name>
            <originId>C0AEmy0LRKuxMdgdIcQ8Xg</originId>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>##WILDVALUE##.ProvisionedStorage</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description>The storage provisioned for all of the virtual machines in all the VPGs recovered to this site.</description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <maxdigits>4</maxdigits>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>UsedStorageMB</name>
            <originId>TpV2whzURYmf44ymJf8NmA</originId>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>##WILDVALUE##.UsedStorage</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description>The storage used by all of the virtual machines in all the VPGs recovered to this site.</description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <maxdigits>4</maxdigits>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>IncomingThroughputInMB</name>
            <originId>Z_CqnSNVTlaZfr5t_f2fjQ</originId>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>##WILDVALUE##.IncomingThroughputInMb</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description>The MB/s for all the applications running on the virtual machines being recovered to the peer site.</description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <maxdigits>4</maxdigits>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>WanThroughputInMB</name>
            <originId>gevANj65Q0qEdPPZAdLKcQ</originId>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>##WILDVALUE##.OutgoingBandWidth</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description>The amount of WAN traffic outgoing to the peer site.</description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <maxdigits>4</maxdigits>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        </datapoints>
        <graphs>
        <graph>
            <name>Paring Status</name>
            <title>Paring Status</title>
            <originId></originId>            <verticallabel>status code</verticallabel>
            <rigid>false</rigid>
            <maxvalue>NaN</maxvalue>
            <minvalue>NaN</minvalue>
            <displayprio>3</displayprio>
            <timescale>1day</timescale>
            <base1024>false</base1024>
            <graphdatapoints>
        <graphdatapoint>
            <name>PairingStatus</name>
            <datapointname>PairingStatus</datapointname>
            <originId></originId>
            <cf>2</cf>
        </graphdatapoint>
            </graphdatapoints>
            <graphvirtualdatapoints>
            </graphvirtualdatapoints>
            <graphdatas>
            <graphdata>
                <type>1</type>
                <legend>Pairing Status</legend>
                <color>blue</color>
                <datapointname>PairingStatus</datapointname>
                <isvirtualdatapoint>false</isvirtualdatapoint>
            </graphdata>
            </graphdatas>
        </graph>
        <graph>
            <name>Site Storage</name>
            <title>Site Storage</title>
            <originId></originId>            <verticallabel>terrabytes</verticallabel>
            <rigid>false</rigid>
            <maxvalue>NaN</maxvalue>
            <minvalue>NaN</minvalue>
            <displayprio>1</displayprio>
            <timescale>1day</timescale>
            <base1024>false</base1024>
            <graphdatapoints>
        <graphdatapoint>
            <name>ProvisionedStorageMB</name>
            <datapointname>ProvisionedStorageMB</datapointname>
            <originId></originId>
            <cf>1</cf>
        </graphdatapoint>
        <graphdatapoint>
            <name>UsedStorageMB</name>
            <datapointname>UsedStorageMB</datapointname>
            <originId></originId>
            <cf>1</cf>
        </graphdatapoint>
            </graphdatapoints>
            <graphvirtualdatapoints>
        <graphvirtualdatapoint>
            <name>ProvisionedStorageTB</name>
            <rpn>ProvisionedStorageMB / pow(1024, 2)</rpn>
            <originId></originId>
        </graphvirtualdatapoint>
        <graphvirtualdatapoint>
            <name>UsedStorageTB</name>
            <rpn>UsedStorageMB / pow(1024, 2)</rpn>
            <originId></originId>
        </graphvirtualdatapoint>
            </graphvirtualdatapoints>
            <graphdatas>
            <graphdata>
                <type>2</type>
                <legend>Provisioned</legend>
                <color>green</color>
                <datapointname>ProvisionedStorageTB</datapointname>
                <isvirtualdatapoint>true</isvirtualdatapoint>
            </graphdata>
            <graphdata>
                <type>2</type>
                <legend>Used</legend>
                <color>orange</color>
                <datapointname>UsedStorageTB</datapointname>
                <isvirtualdatapoint>true</isvirtualdatapoint>
            </graphdata>
            </graphdatas>
        </graph>
        <graph>
            <name>Site Throughput</name>
            <title>Site Throughput</title>
            <originId></originId>            <verticallabel>mb/s</verticallabel>
            <rigid>false</rigid>
            <maxvalue>NaN</maxvalue>
            <minvalue>NaN</minvalue>
            <displayprio>2</displayprio>
            <timescale>1day</timescale>
            <base1024>false</base1024>
            <graphdatapoints>
        <graphdatapoint>
            <name>IncomingThroughputInMB</name>
            <datapointname>IncomingThroughputInMB</datapointname>
            <originId></originId>
            <cf>1</cf>
        </graphdatapoint>
        <graphdatapoint>
            <name>WanThroughputInMB</name>
            <datapointname>WanThroughputInMB</datapointname>
            <originId></originId>
            <cf>1</cf>
        </graphdatapoint>
            </graphdatapoints>
            <graphvirtualdatapoints>
            </graphvirtualdatapoints>
            <graphdatas>
            <graphdata>
                <type>1</type>
                <legend>Incoming Throughput (Disk)</legend>
                <color>olive</color>
                <datapointname>IncomingThroughputInMB</datapointname>
                <isvirtualdatapoint>false</isvirtualdatapoint>
            </graphdata>
            <graphdata>
                <type>1</type>
                <legend>Wan Throughput (Network)</legend>
                <color>silver</color>
                <datapointname>WanThroughputInMB</datapointname>
                <isvirtualdatapoint>false</isvirtualdatapoint>
            </graphdata>
            </graphdatas>
        </graph>
        </graphs>
        <overviewgraphs>
        <overviewgraph>
            <name>WAN Throughput</name>
            <title>WAN Throughput Overview</title>
            <verticallabel>mb/s</verticallabel>
            <rigid>false</rigid>
            <maxvalue>NaN</maxvalue>
            <minvalue>NaN</minvalue>
            <displayprio>1</displayprio>
            <timescale>1day</timescale>
            <base1024>false</base1024>
            <aggregated>false</aggregated>
            <originId></originId>
            <datapoints>
        <overviewgraphdatapoint>
            <name>WanThroughputInMB</name>
            <datapointname>WanThroughputInMB</datapointname>
            <cf>1</cf>
            <aggregateMethod>sum</aggregateMethod>
            <originId></originId>
        </overviewgraphdatapoint>
            </datapoints>
            <virtualdatapoints>
            </virtualdatapoints>
            <lines>
            <overviewgraphline>
                <type>1</type>
                <legend>##INSTANCE##</legend>
                <datapointname>WanThroughputInMB</datapointname>
                <isvirtualdatapoint>false</isvirtualdatapoint>
                <color>silver</color>
            </overviewgraphline>
            </lines>
        </overviewgraph>
        </overviewgraphs>
        <scripts>
        </scripts>
    </entry>
</feed>
