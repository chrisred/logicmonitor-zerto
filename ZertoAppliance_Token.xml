<?xml version="1.0" encoding="UTF-8" ?>
<feed  version="1.0" hasPendingRequests="false" >
  <company></company>
  <status>200</status>
  <errmsg>OK</errmsg>
  <interval>0</interval>
  <isCollectorPublisherEnabled>false</isCollectorPublisherEnabled>
    <entry type="predatasource">
        <version>1739359756</version>
        <name>ZertoAppliance_Token</name>
        <displayedas>Zerto Appliance Token</displayedas>
        <description>Cache the Zerto Appliance API session token.</description>
        <collector>script</collector>
        <hasMultiInstances>false</hasMultiInstances>
        <useWildValueAsUniqueIdentifier>false</useWildValueAsUniqueIdentifier>
        <schedule>300</schedule>
        <appliesTo>hasCategory(&#34;ZertoAppliance&#34;)</appliesTo>
        <wildcardauto>false</wildcardauto>
        <wildcardpersist>false</wildcardpersist>
        <showDeletedInstanceDays>0</showDeletedInstanceDays>
        <wildcardlinuxscript></wildcardlinuxscript>
        <wildcardlinuxcmdline></wildcardlinuxcmdline>
        <wildcardwinscript></wildcardwinscript>
        <wildcardwincmdline></wildcardwincmdline>
        <wildcardgroovyscript></wildcardgroovyscript>
        <wildcardschedule>1440</wildcardschedule>
        <wildcarddisable>false</wildcarddisable>
        <wildcarddeleteinactive>false</wildcarddeleteinactive>
        <agdmethod>none</agdmethod>
        <agdparams></agdparams>
        <group></group>
        <tags></tags>
        <technology>Device Properties:

zertoappliance.host -- Optional, defaults to the device IP when not set.
zertoappliance.port -- Optional, defaults to 443 (Linux), set 9669 for Windows appliances.
zertoappliance.user -- The user name (in the UPN or NetBIOS form as necessary), used with the Windows appliance.
zertoappliance.pass -- The user password, used with the Windows appliance.
zertoappliance.api.id -- The client ID, used with the Linux appliance.
zertoappliance.api.key -- The client secret, used with the Linux appliance.
zertoappliance.type -- Optional, forces the appliance type if required, set either &#34;windows&#34; or &#34;linux&#34;.
system.categories -- Add &#34;ZertoAppliance&#34;.

Notes:

Requires access to the API endpoint on the ZVM or ZCM appliance. There are different authentication methods for the Windows and Linux based appliances.

Windows

The &#34;port&#34; property should be set to 9669, and &#34;user&#34;/&#34;pass&#34; are required to authenticate. Details of the API are available at https://&#60;appliance-ip&#62;:9669/swagger/index.html

Linux

The &#34;api.id&#34; and &#34;api.key&#34; properties are required to authenticate, these can be created in Keycloak, see: https://help.zerto.com/bundle/Linux.ZVM.HTML.10.0/page/Creating_Keycloak_Credentials.htm Details of the API are available at https://&#60;appliance-ip&#62;:443/management/api/swagger/index.html.

This DataSource will populate the Collector script cache with a Zerto Appliance session token. Other DataSources will attempt to use this cached token if it is available.

The cached token is scoped to a device ID, so multiple devices can run the Zerto Appliance DataSources if needed.

The default access token lifetime for Keycloak is 5 minutes. This can be increased under the Advanced tab using the Access Token Lifespan option for the client that was added when creating the credentials. The Collection Schedule for this DataSource could then be increased accordingly.</technology>
        <adlist><![CDATA[{"agdmethod":"none","agdparams":"","id":0,"filters":[],"params":{}}]]></adlist>
        <schemaVersion>2</schemaVersion>
        <dataSourceType>1</dataSourceType>
        <attributes>
        <attribute>
            <name>scripttype</name>
            <value>embed</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>scriptgroovy</name>
            <value>// Copyright (c) 2024 Chris Redit. All rights reserved. https://github.com/chrisred/logicmonitor-zerto

import com.santaba.agent.util.script.ScriptCache
import groovy.json.JsonSlurper
import org.apache.http.client.utils.URIBuilder
import org.apache.http.message.BasicNameValuePair

// core http classes
import org.apache.http.auth.AuthScope
import org.apache.http.auth.Credentials
import org.apache.http.auth.NTCredentials
import org.apache.http.client.config.*
import org.apache.http.client.entity.*
import org.apache.http.client.methods.*
import org.apache.http.client.ServiceUnavailableRetryStrategy
import org.apache.http.conn.ssl.NoopHostnameVerifier
import org.apache.http.conn.ssl.TrustSelfSignedStrategy
import org.apache.http.entity.*
import org.apache.http.Header
import org.apache.http.HttpResponse
import org.apache.http.impl.client.BasicCredentialsProvider
import org.apache.http.impl.client.CloseableHttpClient
import org.apache.http.impl.client.HttpClients
import org.apache.http.impl.client.HttpClientBuilder
import org.apache.http.impl.client.StandardHttpRequestRetryHandler
import org.apache.http.ssl.SSLContextBuilder
import org.apache.http.util.EntityUtils

// LM properties
def propDeviceId = hostProps.get(&#39;system.deviceId&#39;)
def propSystemHost = hostProps.get(&#39;system.hostname&#39;)
def propHost = hostProps.get(&#39;zertoappliance.host&#39;) ?: propSystemHost
def propPort = hostProps.get(&#39;zertoappliance.port&#39;)?.isInteger() ?
    hostProps.get(&#39;zertoappliance.port&#39;).toInteger() : 443
def propUser = hostProps.get(&#39;zertoappliance.user&#39;)
def propPass = hostProps.get(&#39;zertoappliance.pass&#39;)
def propClientId = hostProps.get(&#39;zertoappliance.api.id&#39;)
def propClientSecret = hostProps.get(&#39;zertoappliance.api.key&#39;)
def propApplianceType = hostProps.get(&#39;zertoappliance.type&#39;)

try
{
    def token = &#39;&#39;

    if (getApplianceType(propPort, propApplianceType) == &#39;linux&#39;)
    {
        token = getLinuxToken(propHost, propPort, propClientId, propClientSecret)
    }
    else
    {
        token = getWindowsToken(propHost, propPort, propUser, propPass)
    }

    if (token == &#39;&#39;)
    {
        println &#39;Error: Invalid session token.&#39;
        return 2
    }
    else
    {
        def cache = ScriptCache.getCache()
        cache.set(&#34;ZertoApplianceToken${propDeviceId}&#34;, token, 1800000)
    }

    return 0
}
catch (Exception e)
{
    println e
    return 1
}

String getApplianceType(Integer port, String applianceType)
{
    if (applianceType == &#39;linux&#39;) { return &#39;linux&#39; }
    else if (applianceType == &#39;windows&#39;) { return &#39;windows&#39; }
    else if (port == 443) { return &#39;linux&#39; }
    else { return &#39;windows&#39; }
}

String getLinuxToken(String host, Integer port, String clientId, String clientSecret)
{
    def accessToken = &#39;&#39;

    def postUriBuilder = new URIBuilder()
        .setScheme(&#39;https&#39;)
        .setPort(port)
        .setHost(host)
        .setPath(&#39;/auth/realms/zerto/protocol/openid-connect/token&#39;)

    def postData = []
    postData.add(new BasicNameValuePair(&#39;grant_type&#39;, &#39;client_credentials&#39;))
    postData.add(new BasicNameValuePair(&#39;client_id&#39;, clientId))
    postData.add(new BasicNameValuePair(&#39;client_secret&#39;, clientSecret))
    def postEntity = new UrlEncodedFormEntity(postData)

    def httpPost = new HttpPost(postUriBuilder.build())
    httpPost.setHeader(&#39;Accept&#39;, &#39;application/json&#39;)
    httpPost.setHeader(&#39;Content-Type&#39;, &#39;application/x-www-form-urlencoded&#39;)

    def postResponse = runRequest(httpPost, null, postEntity)

    if (postResponse.code == 200)
    {
        def jsonSlurper = new JsonSlurper()
        def jsonResponse = jsonSlurper.parseText(postResponse.body)
        accessToken = jsonResponse.access_token
    }

    return accessToken
}

String getWindowsToken(String host, Integer port, String user, String pass)
{
    def sessionKey = &#39;&#39;
    def base64Auth = &#34;${user}:${pass}&#34;.bytes.encodeBase64().toString()

    def postUriBuilder = new URIBuilder()
        .setScheme(&#39;https&#39;)
        .setHost(host)
        .setPort(port)
        .setPath(&#39;/v1/session/add&#39;)

    def httpPost = new HttpPost(postUriBuilder.build())
    httpPost.setHeader(&#39;Authorization&#39; , &#34;Basic ${base64Auth}&#34;)
    httpPost.setHeader(&#39;Content-Type&#39;, &#39;application/json&#39;)

    def postData = &#39;{&#34;authenticationMethod&#34;: 1}&#39;
    def postEntity = new StringEntity(postData, ContentType.APPLICATION_JSON)

    def postResponse = runRequest(httpPost, null, postEntity)

    if (postResponse.code == 200)
    {
        sessionKey = postResponse.headers.find { it.getName() == &#39;x-zerto-session&#39; }.getValue()
    }

    return sessionKey
}

Map runRequest(HttpRequestBase request, Credentials credentials=null, AbstractHttpEntity entity=null)
{
    if (request instanceof HttpGet != true)
    {
        request.setEntity(entity)
    }

    // http://docs.groovy-lang.org/docs/groovy-2.4.21/html/documentation/#_map_to_type_coercion
    // https://stackoverflow.com/questions/48541329/timeout-between-request-retries-apache-httpclient
    def waitPeriod = 0L
    def serviceRetry = [
        retryRequest: { response, executionCount, context -&#62;
            // increase the wait for each try, here we would wait 3, 6 and 9 seconds
            waitPeriod += 3000L
            def statusCode = response.getStatusLine().getStatusCode()
            return executionCount &#60;= 3 &#38;&#38; (statusCode == 429 || statusCode == 500 || statusCode == 503)
        },
        getRetryInterval: {
            return waitPeriod
        }
    ] as ServiceUnavailableRetryStrategy

    // create an http client which retries for connection &#34;I/O&#34; errors and for certain http status codes
    HttpClientBuilder httpClientBuilder = HttpClients.custom()
        .setDefaultRequestConfig(RequestConfig.custom().setCookieSpec(CookieSpecs.STANDARD).build())
        .setRetryHandler(new StandardHttpRequestRetryHandler(3, false))
        .setServiceUnavailableRetryStrategy(serviceRetry)

    // allow self-signed certificates
    httpClientBuilder.setSSLContext(
        new SSLContextBuilder().loadTrustMaterial(null, TrustSelfSignedStrategy.INSTANCE).build()
    ).setSSLHostnameVerifier(NoopHostnameVerifier.INSTANCE)

    if (credentials)
    {
        // attempt authentication with credentials supported by the BasicCredentialsProvider
        BasicCredentialsProvider credentialProvider = new BasicCredentialsProvider()
        credentialProvider.setCredentials(AuthScope.ANY, credentials)
        httpClientBuilder.setDefaultCredentialsProvider(credentialProvider)
    }

    CloseableHttpClient httpClient = httpClientBuilder.build()
    HttpResponse response = httpClient.execute(request)
    String responseBody = null

    if (response.getEntity())
    {
        // only attempt to convert the body to string if there is content
        responseBody = EntityUtils.toString(response.getEntity())
    }

    Integer code = response.getStatusLine().getStatusCode()
    List&#60;Header&#62; headers = response.getAllHeaders()

    def responseMap = [
        code: code,
        headers: headers,
        body: responseBody,
    ]

    httpClient.close()
    return responseMap
}</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowsscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowscmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxcmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        </attributes>
        <datapoints>
        <datapoint>
            <name>ExecutionTimeMS</name>
            <originId>Mb_IVqSgRKCJ3hlvLPgj4g</originId>
            <dataType>4</dataType>
            <type>2</type>
            <postprocessormethod>none</postprocessormethod>
            <postprocessorparam></postprocessorparam>
            <usevalue>responseTime</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description>Time taken to execute the script in milliseconds.</description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <maxdigits>4</maxdigits>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>ExitCode</name>
            <originId>g_n49GYcSBu65CNYPZsaqA</originId>
            <dataType>4</dataType>
            <type>2</type>
            <postprocessormethod>none</postprocessormethod>
            <postprocessorparam></postprocessorparam>
            <usevalue>exitCode</usevalue>
            <alertexpr>!= 0 0</alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody>##HOST## failed to get a Zerto Analytics session token with a status of ##VALUE##, placing resource into a ##LEVEL## level.

This started at ##START##, -- or ##DURATION## ago.

Status codes:
0=Success
1=Script error
2=Failed to get session token</alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description>Script exit code.

Status codes:
0=Success
1=Script error
2=Failed to get session token</description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <maxdigits>4</maxdigits>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>2</alertTransitionIval>
            <alertClearTransitionIval>1</alertClearTransitionIval>
        </datapoint>
        </datapoints>
        <graphs>
        <graph>
            <name>Execution Time</name>
            <title>Execution Time</title>
            <originId></originId>            <verticallabel>milliseconds</verticallabel>
            <rigid>false</rigid>
            <maxvalue>NaN</maxvalue>
            <minvalue>0.0</minvalue>
            <displayprio>2</displayprio>
            <timescale>1day</timescale>
            <base1024>false</base1024>
            <graphdatapoints>
        <graphdatapoint>
            <name>ExecutionTimeMS</name>
            <datapointname>ExecutionTimeMS</datapointname>
            <originId></originId>
            <cf>1</cf>
        </graphdatapoint>
            </graphdatapoints>
            <graphvirtualdatapoints>
            </graphvirtualdatapoints>
            <graphdatas>
            <graphdata>
                <type>1</type>
                <legend>ExecutionTimeMS</legend>
                <color>orange</color>
                <datapointname>ExecutionTimeMS</datapointname>
                <isvirtualdatapoint>false</isvirtualdatapoint>
            </graphdata>
            </graphdatas>
        </graph>
        <graph>
            <name>Exit Code</name>
            <title>Exit Code</title>
            <originId></originId>            <verticallabel>status code</verticallabel>
            <rigid>false</rigid>
            <maxvalue>NaN</maxvalue>
            <minvalue>0.0</minvalue>
            <displayprio>1</displayprio>
            <timescale>1day</timescale>
            <base1024>false</base1024>
            <graphdatapoints>
        <graphdatapoint>
            <name>ExitCode</name>
            <datapointname>ExitCode</datapointname>
            <originId></originId>
            <cf>2</cf>
        </graphdatapoint>
            </graphdatapoints>
            <graphvirtualdatapoints>
            </graphvirtualdatapoints>
            <graphdatas>
            <graphdata>
                <type>1</type>
                <legend>ExitCode</legend>
                <color>blue</color>
                <datapointname>ExitCode</datapointname>
                <isvirtualdatapoint>false</isvirtualdatapoint>
            </graphdata>
            </graphdatas>
        </graph>
        </graphs>
        <overviewgraphs>
        </overviewgraphs>
        <scripts>
        </scripts>
    </entry>
</feed>
